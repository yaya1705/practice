
変数の更新
* 変数を更新する際はデータ型は記述しない

class Main {
  public static void main(String[] args) {
    int number = 11;
    String text = "Ruby";
    System.out.println(number);
    System.out.println(text);
    
    // 変数numberを9で上書きしてください
    number = 9;
    
    // 変数numberを出力してください
    System.out.println(number);

     実行結果 9

    // 変数textを「Java」で上書きしてください
    text = "Java";
     
    // 変数textを出力してください
    System.out.println(text);

     実行結果  Java
    
  }
}

自己代入

class Main {
  public static void main(String[] args) {
    int number = 3;
    System.out.println(number);
    
    実行結果　３
    // 変数numberの値に7を足して、変数numberを上書きしてください
    number = number + 7;
    
    // 変数numberを出力してください
    System.out.println(number);

     実行結果　10 
  }
}

自己代入の省略

class Main {
  public static void main(String[] args) {
    int number = 8;
    
    // 変数numberに7をかけて、変数numberを上書きしてください
    number *= 7;
    
    // 変数numberを出力してください
    
    System.out.println(number);

    実行結果　56

    // 変数numberの値に1を足して、変数numberを上書きしてください
    number ++;
    
    // 変数numberを出力してください
    System.out.println(number);

    実行結果　57
    
  }
}

変数の役割と注意点

変数　良い例
　　　　date ・・・ ◎　英単語
　　　 userName ・・・ ◎　２語以上の場合は大文字で仕切る

　　　悪い例
　　　　1name ・・・　× 数字開始
　　　　first_name ・・・　△ アンダーバー(スネークケース)
　　　　namae  ・・・　△ ローマ字
　　　　名前　・・・ △ 日本語

小数点を扱おう

class Main {
  public static void main(String[] args) {
    // double型の変数number1を定義し、8.5を代入してください。
    double number1 = 8.5;
    
    // double型の変数number2を定義し、3.4を代入してください。
    double number2 = 3.4;
    
    // number1にnumber2を足した値を出力してください
    System.out.println(number1 + number2);
    
    // number1からnumber2を引いた値を出力してください
    System.out.println(number1 - number2);
    
  }
}

型変換について

class Main {
  public static void main(String[] args) {
    int month = 12;
    int date = 31;
    
    // 「12月31日」となるように変数と文字列を連結して出力してください
    System.out.println(month + "月"+ date + "日");
    
    // 7を2で割った値を出力してください
    System.out.println(7/2);
    
    // 7.0を2.0で割った値を出力してください
    System.out.println(7.0/2.0);
    
    // 7を2.0で割った値を出力してください
    System.out.println(7/2.0);
    
  }
}

強制型変換

*強制的に型変換をキャストと呼び、下図のように、(変換したいデータ型)値とします。
int型同士の値から、最終的にdouble型の計算結果を得たい場合、どちらか1つをキャストしてあげる。
（前ページで学んだように、片方がdouble型であれば結果はdouble型になります）。

int number1 = 13;
int number2 = 4;
System.out.println((double)number1/numner2);

実行結果　3.25

class Main {
  public static void main(String[] args) {
    int number1 = 7;
    int number2 = 2;
    System.out.println(number1 / number2);
    
    // number1をdouble型にキャストし、number2で割った値を出力してください
    System.out.println((double)number1/number2);
    
  }
}

実行結果　3.5

class Main {
  public static void main(String[] args) {
    // 変数nameに、好きな名前を代入してください
    String name = "ラウール";
    System.out.println("名前は"+name+"です");
    
    // 変数ageに、好きな年齢を代入してください
    int age = 19;
    System.out.println("年齢は"+age+"歳です");
    
    // 変数heightに、好きな身長を代入してください（例: 1.2）
     double height = 1.9;
    System.out.println("身長は"+height+"mです");
    // 変数weightに、好きな体重を代入してください（例: 20.0）
    double weight = 62.0;

    System.out.println("体重は"+weight+"kgです");
    // 変数bmiに、BMIを計算して代入してください
    double bmi = weight / height /height;
    System.out.println("BMIは"+bmi+"です");

    // 名前、年齢、身長、体重、BMIに関する情報を出力してください
  }
}

実行結果


　　　　


